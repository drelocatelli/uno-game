import { Server } from 'socket.io';
import { HandlerMetadata } from './types/HandlerMetadata';
import { SocketControllersOptions } from './types/SocketControllersOptions';
import { ControllerMetadata } from './types/ControllerMetadata';
import { MiddlewareMetadata } from './types/MiddlewareMetadata';
import { TransformOptions } from './types/TransformOptions';
export declare class SocketControllers {
    private options;
    container: {
        get<T>(someClass: {
            new (...args: any[]): T;
        } | Function): T;
    };
    controllers: HandlerMetadata<ControllerMetadata>[];
    middlewares: HandlerMetadata<MiddlewareMetadata>[];
    io: Server;
    transformOptions: TransformOptions;
    constructor(options: SocketControllersOptions);
    private loadHandlers;
    private loadHandlersFromPath;
    private registerMiddlewares;
    private registerControllers;
    private registerController;
    private executeAction;
    private handleActionResult;
    private registerMiddleware;
    private resolveParameters;
    private resolveParameter;
    private transformActionValue;
    private collectScopedContainerParams;
    private extractNamespaceParameters;
}
